{"version":3,"sources":["logo.svg","components/Login-Component.js","components/Register-Component.js","helper/ResponseHandler.js","components/Profile-Component.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LoginForm","props","schema","yup","shape","Email","required","email","password","max","useForm","validationSchema","register","handleSubmit","errors","login","to","className","style","margin","onSubmit","data","fetch","apiEndpoint","method","headers","body","JSON","stringify","then","res","json","token","expireDate","Date","setTime","getTime","localStorage","setItem","setCookie","expires","path","httpOnly","htmlFor","id","name","type","placeholder","ref","message","justifyContent","RegisterForm","passwordConfirmation","oneOf","phoneNumber","typeError","min","handleResponse","response","text","parse","ok","indexOf","status","removeItem","window","location","reload","Profile","cookie","resdata","setNewData","App","getItem","useCookies","cookies","setAuthCookie","cookieName","cookieValue","options","authCookie","useState","setData","exact","render","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.cf46234f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport {useForm} from 'react-hook-form';\nimport * as yup from 'yup';\nimport { Redirect } from 'react-router-dom';\n\nconst LoginForm = (props)=>{\n\n  const schema = yup.object().shape({\n    Email: yup\n      .string()\n      .required()\n      .email(),\n    password: yup\n      .string()\n      .required()\n      .max(45),\n  });\n  \n  const onSubmit = data => {\n    // truyen xuong back-end + render /profile\n    fetch(props.apiEndpoint+'/users/login', {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      email: data.Email,\n      password: data.password\n      })\n    })\n    .then(res => res.json())\n    .then(res => {\n      if(res.data.token != null){\n        let expireDate = new Date();\n        expireDate.setTime(expireDate.getTime() + (15*60*1000)); // 15 min expiration\n        localStorage.setItem(\"login\",\"true\");\n        props.setCookie('authentication',res.data.token,{\n          expires: expireDate,\n          path: '/',\n          httpOnly: false,\n        });\n      }\n    })\n  }\n  \n  const { register, handleSubmit, errors } = useForm({\n    validationSchema: schema\n  });\n\n  if(props.login){\n    return <Redirect to=\"/profile\"></Redirect>\n  } else\n  return (<div className=\"w-full max-w-xs\" style={{margin: '50px auto'}}>\n    <form className=\"bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4\" onSubmit={handleSubmit(onSubmit)}>\n      <div className=\"mb-4\">\n        <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"Email\">\n          Email\n        </label>\n        <input \n        className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" id=\"Email\" name=\"Email\" type=\"text\" placeholder=\"Email\" ref={register}/>\n        <p className=\"text-left text-red-700 text-xs\">{errors?.Email?.message}</p>\n      </div>\n      <div className=\"mb-6\">\n        <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"password\">\n          Password\n        </label>\n        <input className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" id=\"password\" name=\"password\" type=\"password\" placeholder=\"******************\" ref={register} />\n        <p className=\"text-left text-red-700 text-xs\">{errors?.password?.message}</p>\n      </div>\n      <div className=\"flex items-center justify-between\" style={{justifyContent:\"center\"}}>\n      <button className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\" type=\"submit\">\n          Login\n      </button>\n      </div>\n    </form>\n    <p className=\"text-center text-gray-500 text-xs\">\n      &copy;2020 Acme Corp. All rights reserved.\n    </p>\n  </div>)\n}\n\nexport default LoginForm;","import React from 'react';\nimport {useForm} from 'react-hook-form';\nimport * as yup from 'yup';\nimport { Redirect } from 'react-router-dom';\n\nconst RegisterForm = (props)=>{\n\n  const schema = yup.object().shape({\n    Email: yup\n      .string()\n      .required()\n      .email(),\n\n    password: yup\n      .string()\n      .required()\n      .max(45),\n\n    passwordConfirmation: yup\n    .string()\n    .required()\n    .oneOf([yup.ref(\"password\"), null], \"Password must match\"),\n\n    name: yup\n    .string()\n    .required()\n    .max(20),\n\n    phoneNumber: yup\n    .number()\n    .typeError('Must be a number')\n    .required()\n    .min(9)\n    .max(15)\n  });\n\n  const onSubmit = data => {\n    // truyen xuong back-end + render /profile\n    const register = fetch(props.apiEndpoint + '/users/register', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        email: data.Email,\n        password: data.password,\n        name: data.name,\n        phoneNumber: data.phoneNumber\n        })\n      })\n      .then(res => res.json())\n      .then(res => {\n        if(res.data.token != null){\n          localStorage.setItem(\"login\",\"true\");\n          localStorage.setItem(\"access-token\",res.data.token);\n        }\n    })\n  }\n\n  const { register, handleSubmit, errors } = useForm({\n    validationSchema: schema\n  });\n\n  if(props.login){\n      return <Redirect to=\"/profile\"></Redirect>\n  } else\n    return (<div className=\"w-full max-w-xs\" style={{margin: '50px auto'}}>\n      <form className=\"bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4\" onSubmit={handleSubmit(onSubmit)}>\n        <div className=\"mb-4\">\n          <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"Email\">\n            Email\n          </label>\n          <input className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" id=\"Email\" name=\"Email\" type=\"text\" placeholder=\"example@gmail.com\"\n          ref={register}/>\n          <p className=\"text-left text-red-700 text-xs\">{errors?.Email?.message}</p>\n        </div>\n        <div className=\"mb-4\">\n          <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"password\">\n            Password\n          </label>\n          <input className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700  leading-tight focus:outline-none focus:shadow-outline\" name=\"password\" id=\"password\" type=\"password\" placeholder=\"******************\" ref={register}/>\n          <p className=\"text-left text-red-700 text-xs\">{errors?.password?.message}</p>\n        </div>\n        <div className=\"mb-4\">\n          <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"passwordConfirmation\">\n            Re-Password\n          </label>\n          <input className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700  leading-tight focus:outline-none focus:shadow-outline\" name=\"passwordConfirmation\" id=\"passwordConfirmation\" type=\"password\" placeholder=\"******************\" ref={register}/>\n          <p className=\"text-left text-red-700 text-xs\">{errors?.passwordConfirmation?.message}</p>\n        </div>\n        <div className=\"mb-4\">\n          <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"name\">\n            Full Name\n          </label>\n          <input className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700  leading-tight focus:outline-none focus:shadow-outline\" name=\"name\" id=\"name\" type=\"text\" placeholder=\"Kha Tran Minh\" ref={register}/>\n          <p className=\"text-left text-red-700 text-xs\">{errors?.name?.message}</p>\n        </div>\n        <div className=\"mb-4\">\n          <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"phoneNumber\">\n            Phone Number (Raw numbers)\n          </label>\n          <input className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700  leading-tight focus:outline-none focus:shadow-outline\" name=\"phoneNumber\" id=\"phoneNumber\" type=\"text\" placeholder=\"0482246257\" ref={register}/>\n          <p className=\"text-left text-red-700 text-xs\">{errors?.phoneNumber?.message}</p>\n        </div>\n        <div className=\"flex items-center justify-between\"  style={{justifyContent:\"center\"}}>\n          <button className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\" type=\"submit\">\n            Register\n          </button>\n        </div>\n      </form>\n      <p className=\"text-center text-gray-500 text-xs\">\n        &copy;2020 Acme Corp. All rights reserved.\n      </p>\n    </div>)\n}\n\nexport default RegisterForm;\n\n","\nfunction handleResponse(response){\n    return response.text().then(text => {\n        const res = JSON.parse(text);\n        if (!response.ok) {\n            if ([400,401, 403].indexOf(response.status) !== -1) {\n                localStorage.removeItem(\"login\");\n                window.location.reload();\n            }\n            return false;\n        }\n        return res.data;\n    });\n}\n\nexport default handleResponse;","import React from 'react';\nimport handleResponse from '../helper/ResponseHandler';\nimport { Redirect } from 'react-router-dom';\n\nconst Profile = (props)=>{\n  const api =\n    fetch(props.apiEndpoint+'/users/profile', {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + props.cookie,\n    },\n    })\n    .then(res => handleResponse(res))\n    .then(resdata => {\n      resdata = JSON.parse(resdata);\n      props.setNewData(resdata);\n    });\n\n  // if authorization fails\n  if(props.data === false)\n    return <Redirect to=\"/login\"></Redirect>\n  else // render the profile page\n  return (<div className=\"w-full max-w-xs\" style={{margin: '50px auto'}}>\n    <form className=\"bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4\" >\n        <div className=\"mb-4\">\n          <label className=\"block text-gray-500 text-sm font-bold mb-2\">\n            Email\n          </label>\n          <p className=\"block text-gray-700 text-sm font-bold mb-2\">\n            {props.data && props.data['email']}\n          </p>\n        </div>\n        <div className=\"mb-4\">\n         <label className=\"block text-gray-500 text-sm font-bold mb-2\">\n            Full Name\n          </label>\n          <p className=\"block text-gray-700 text-sm font-bold mb-2\">\n            {props.data && props.data['fullName']}\n          </p>\n        </div>\n        <div className=\"mb-4\">\n         <label className=\"block text-gray-500 text-sm font-bold mb-2\">\n            Phone Number\n          </label>\n          <p className=\"block text-gray-700 text-sm font-bold mb-2\">\n            {props.data && props.data['phoneNumber']}\n          </p>\n        </div>\n      </form>\n      <p className=\"text-center text-gray-500 text-xs\">\n        &copy;2020 Acme Corp. All rights reserved.\n      </p>\n    </div>\n  )\n}\n\nexport default Profile;\n\n","import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Switch, Route, Redirect } from 'react-router-dom'\nimport './css/tailwind.css'\nimport  LoginForm  from \"./components/Login-Component\";\nimport RegisterForm from \"./components/Register-Component\";\nimport Profile from \"./components/Profile-Component\";\nimport {useCookies} from \"react-cookie\"\n\nfunction App() {\n  const login = (localStorage.getItem(\"login\")==='true');\n  const apiEndpoint = \"http://localhost:3001/api\";\n  const [cookies,setCookie,removeCookie] = useCookies(['authentication']);\n\n  const setAuthCookie = (cookieName,cookieValue,options) => setCookie(cookieName,cookieValue,options);\n  const authCookie = cookies['authentication'];\n  const [data,setData] = useState(null);\n  const setNewData = (data) => setData(data);\n\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path='/login' render={(props) => <LoginForm login={login} setCookie={setAuthCookie} apiEndpoint={apiEndpoint}></LoginForm>} />\n        <Route exact path='/profile' render={props => (\n            login?\n                <Profile cookie={authCookie} data={data} setNewData={setNewData} apiEndpoint={apiEndpoint}/>\n            : <Redirect to=\"/login\" />\n        )} />\n        <Route exact path='/Register' render={(props) => <RegisterForm login={login} apiEndpoint={apiEndpoint}></RegisterForm>} />\n        <Route path='/' render={props => (\n            login?\n                <Profile cookie={authCookie} data={data} setNewData={setNewData} apiEndpoint={apiEndpoint}/>\n            : <Redirect to=\"/login\" />\n        )} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}